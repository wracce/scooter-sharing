/* tslint:disable */
/* eslint-disable */
/**
 * Users Service
 * Сервис для работы с пользователями
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateRequestDto
 */
export interface CreateRequestDto {
    /**
     * The value to be processed
     * @type {string}
     * @memberof CreateRequestDto
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'middlename'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface LogMessageDto
 */
export interface LogMessageDto {
    /**
     * Message to be logged to the queue
     * @type {string}
     * @memberof LogMessageDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface RegisterResponseDto
 */
export interface RegisterResponseDto {
    /**
     * Success flag
     * @type {boolean}
     * @memberof RegisterResponseDto
     */
    'success': boolean;
    /**
     * User registration message
     * @type {string}
     * @memberof RegisterResponseDto
     */
    'message': string;
    /**
     * User data
     * @type {UserProfileResponseDto}
     * @memberof RegisterResponseDto
     */
    'user': UserProfileResponseDto;
}
/**
 * 
 * @export
 * @interface RentScooterDto
 */
export interface RentScooterDto {
    /**
     * 
     * @type {string}
     * @memberof RentScooterDto
     */
    'endDate': string;
}
/**
 * 
 * @export
 * @interface RentScooterResponseDto
 */
export interface RentScooterResponseDto {
    /**
     * 
     * @type {string}
     * @memberof RentScooterResponseDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof RentScooterResponseDto
     */
    'endDate': string;
    /**
     * 
     * @type {number}
     * @memberof RentScooterResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof RentScooterResponseDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof RentScooterResponseDto
     */
    'carId': string;
    /**
     * 
     * @type {string}
     * @memberof RentScooterResponseDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UserProfileResponseDto
 */
export interface UserProfileResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'middlename': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'lastname': string;
    /**
     * 
     * @type {number}
     * @memberof UserProfileResponseDto
     */
    'money': number;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'birthday': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponseDto
     */
    'address': string;
}

/**
 * ConsulApi - axios parameter creator
 * @export
 */
export const ConsulApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consulControllerGetHealth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsulApi - functional programming interface
 * @export
 */
export const ConsulApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsulApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consulControllerGetHealth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consulControllerGetHealth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsulApi.consulControllerGetHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsulApi - factory interface
 * @export
 */
export const ConsulApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsulApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consulControllerGetHealth(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.consulControllerGetHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsulApi - object-oriented interface
 * @export
 * @class ConsulApi
 * @extends {BaseAPI}
 */
export class ConsulApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsulApi
     */
    public consulControllerGetHealth(options?: RawAxiosRequestConfig) {
        return ConsulApiFp(this.configuration).consulControllerGetHealth(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoggerApi - axios parameter creator
 * @export
 */
export const LoggerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Log a message to the queue
         * @param {LogMessageDto} logMessageDto Log message in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggerControllerLogMessage: async (logMessageDto: LogMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logMessageDto' is not null or undefined
            assertParamExists('loggerControllerLogMessage', 'logMessageDto', logMessageDto)
            const localVarPath = `/api/log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoggerApi - functional programming interface
 * @export
 */
export const LoggerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoggerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Log a message to the queue
         * @param {LogMessageDto} logMessageDto Log message in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loggerControllerLogMessage(logMessageDto: LogMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loggerControllerLogMessage(logMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoggerApi.loggerControllerLogMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoggerApi - factory interface
 * @export
 */
export const LoggerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoggerApiFp(configuration)
    return {
        /**
         * 
         * @summary Log a message to the queue
         * @param {LogMessageDto} logMessageDto Log message in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loggerControllerLogMessage(logMessageDto: LogMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.loggerControllerLogMessage(logMessageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoggerApi - object-oriented interface
 * @export
 * @class LoggerApi
 * @extends {BaseAPI}
 */
export class LoggerApi extends BaseAPI {
    /**
     * 
     * @summary Log a message to the queue
     * @param {LogMessageDto} logMessageDto Log message in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggerApi
     */
    public loggerControllerLogMessage(logMessageDto: LogMessageDto, options?: RawAxiosRequestConfig) {
        return LoggerApiFp(this.configuration).loggerControllerLogMessage(logMessageDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создаем донос
         * @param {CreateRequestDto} createRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRequest: async (createRequestDto: CreateRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequestDto' is not null or undefined
            assertParamExists('usersControllerCreateRequest', 'createRequestDto', createRequestDto)
            const localVarPath = `/api/users/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegister: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerRegister', 'createUserDto', createUserDto)
            const localVarPath = `/api/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rent scooter
         * @param {string} id 
         * @param {RentScooterDto} rentScooterDto rent scooter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRentScooter: async (id: string, rentScooterDto: RentScooterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRentScooter', 'id', id)
            // verify required parameter 'rentScooterDto' is not null or undefined
            assertParamExists('usersControllerRentScooter', 'rentScooterDto', rentScooterDto)
            const localVarPath = `/api/users/rent-scooter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rentScooterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создаем донос
         * @param {CreateRequestDto} createRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreateRequest(createRequestDto: CreateRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreateRequest(createRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerCreateRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRegister(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rent scooter
         * @param {string} id 
         * @param {RentScooterDto} rentScooterDto rent scooter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRentScooter(id: string, rentScooterDto: RentScooterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentScooterResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRentScooter(id, rentScooterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRentScooter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Создаем донос
         * @param {CreateRequestDto} createRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRequest(createRequestDto: CreateRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerCreateRequest(createRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponseDto> {
            return localVarFp.usersControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<RegisterResponseDto> {
            return localVarFp.usersControllerRegister(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rent scooter
         * @param {string} id 
         * @param {RentScooterDto} rentScooterDto rent scooter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRentScooter(id: string, rentScooterDto: RentScooterDto, options?: RawAxiosRequestConfig): AxiosPromise<RentScooterResponseDto> {
            return localVarFp.usersControllerRentScooter(id, rentScooterDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Создаем донос
     * @param {CreateRequestDto} createRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreateRequest(createRequestDto: CreateRequestDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreateRequest(createRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetProfile(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register new user
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRegister(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rent scooter
     * @param {string} id 
     * @param {RentScooterDto} rentScooterDto rent scooter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRentScooter(id: string, rentScooterDto: RentScooterDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRentScooter(id, rentScooterDto, options).then((request) => request(this.axios, this.basePath));
    }
}



